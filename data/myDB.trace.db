2025-02-22 16:14:59.987045+09:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: SQLステートメントに文法エラーがあります "INSERT INTO category(id, category_name) [*]VALUE(1, '和食')"; 期待されるステートメント "OVERRIDING USER VALUE, OVERRIDING SYSTEM VALUE, DIRECT, DEFAULT VALUES, VALUES, SET, WITH, (, SELECT, TABLE, VALUES"
Syntax error in SQL statement "INSERT INTO category(id, category_name) [*]VALUE(1, '和食')"; expected "OVERRIDING USER VALUE, OVERRIDING SYSTEM VALUE, DIRECT, DEFAULT VALUES, VALUES, SET, WITH, (, SELECT, TABLE, VALUES"; SQL statement:
INSERT INTO category(id, category_name) VALUE(1, '和食') [42001-224]
2025-02-22 16:18:43.537441+09:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: SQLステートメントに文法エラーがあります "INSERT INTO Store_Info (id, category_id, name, address, tel, open_Time, Holiday, image_Name) VALUES(1,1,'燗あがり','〒160-0023 東京都新宿区西新宿７丁目１６−１２ 新YSビル 3階','03-5338-5337','17:00~23:00','なし',[*])"; 期待されるステートメント "DEFAULT, INTERSECTS (, NOT, EXISTS, UNIQUE, INTERSECTS"
Syntax error in SQL statement "INSERT INTO Store_Info (id, category_id, name, address, tel, open_Time, Holiday, image_Name) VALUES(1,1,'燗あがり','〒160-0023 東京都新宿区西新宿７丁目１６−１２ 新YSビル 3階','03-5338-5337','17:00~23:00','なし',[*])"; expected "DEFAULT, INTERSECTS (, NOT, EXISTS, UNIQUE, INTERSECTS"; SQL statement:
INSERT INTO Store_Info (id, category_id, name, address, tel, open_Time, Holiday, image_Name) VALUES(1,1,'燗あがり','〒160-0023 東京都新宿区西新宿７丁目１６−１２ 新YSビル 3階','03-5338-5337','17:00~23:00','なし',) [42001-224]
2025-02-22 16:21:22.522216+09:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: SQLステートメントに文法エラーがあります "INSERT INTO Store_Info (id, category_id, name, address, tel, open_Time, Holiday, image_Name) VALUES(1,1,'燗あがり','〒160-0023 東京都新宿区西新宿７丁目１６−１２ 新YSビル 3階','03-5338-5337','17:00~23:00','なし',[*])"; 期待されるステートメント "DEFAULT, INTERSECTS (, NOT, EXISTS, UNIQUE, INTERSECTS"
Syntax error in SQL statement "INSERT INTO Store_Info (id, category_id, name, address, tel, open_Time, Holiday, image_Name) VALUES(1,1,'燗あがり','〒160-0023 東京都新宿区西新宿７丁目１６−１２ 新YSビル 3階','03-5338-5337','17:00~23:00','なし',[*])"; expected "DEFAULT, INTERSECTS (, NOT, EXISTS, UNIQUE, INTERSECTS"; SQL statement:
INSERT INTO Store_Info (id, category_id, name, address, tel, open_Time, Holiday, image_Name) VALUES(1,1,'燗あがり','〒160-0023 東京都新宿区西新宿７丁目１６−１２ 新YSビル 3階','03-5338-5337','17:00~23:00','なし',) [42001-224]
2025-02-22 16:24:46.848955+09:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: SQLステートメントに文法エラーがあります "INSERT INTO Store_Info (id, category_id, name, address, tel, open_Time, Holiday, image_Name) VALUES(2,6[*]'UNIHOLIC','〒106-0032 東京都港区六本木７丁目１４−５ 大和ビル 11F','03-5860-6852','17:00~23:00','なし','')"; 期待されるステートメント "[, ., ::, AT, FORMAT, *, /, %, +, -, ||, NOT, IS, ILIKE, REGEXP, AND, OR, ,, )"
Syntax error in SQL statement "INSERT INTO Store_Info (id, category_id, name, address, tel, open_Time, Holiday, image_Name) VALUES(2,6[*]'UNIHOLIC','〒106-0032 東京都港区六本木７丁目１４−５ 大和ビル 11F','03-5860-6852','17:00~23:00','なし','')"; expected "[, ., ::, AT, FORMAT, *, /, %, +, -, ||, NOT, IS, ILIKE, REGEXP, AND, OR, ,, )"; SQL statement:
INSERT INTO Store_Info (id, category_id, name, address, tel, open_Time, Holiday, image_Name) VALUES(2,6'UNIHOLIC','〒106-0032 東京都港区六本木７丁目１４−５ 大和ビル 11F','03-5860-6852','17:00~23:00','なし','') [42001-224]
2025-03-18 20:35:52.735972+09:00 database: flush
org.h2.message.DbException: 一般エラー: "org.h2.mvstore.MVStoreException: The file is locked: /Users/yamashiromomoka/MomoLogWeb/data/myDB.mv.db [2.2.224/7]"
General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/yamashiromomoka/MomoLogWeb/data/myDB.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.get(DbException.java:212)
	at org.h2.message.DbException.convert(DbException.java:407)
	at org.h2.mvstore.db.Store.lambda$new$0(Store.java:122)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:1546)
	at org.h2.mvstore.MVStore.panic(MVStore.java:371)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:291)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:2035)
	at org.h2.mvstore.db.Store.<init>(Store.java:133)
	at org.h2.engine.Database.<init>(Database.java:326)
	at org.h2.engine.Engine.openSession(Engine.java:92)
	at org.h2.engine.Engine.openSession(Engine.java:222)
	at org.h2.engine.Engine.createSession(Engine.java:201)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:343)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:125)
	at org.h2.Driver.connect(Driver.java:59)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:137)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:360)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:202)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:461)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:550)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:98)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:111)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:439)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate.delegateWork(JdbcIsolationDelegate.java:61)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.getJdbcEnvironmentUsingJdbcMetadata(JdbcEnvironmentInitiator.java:292)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:124)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:78)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:130)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:238)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:215)
	at org.hibernate.boot.model.relational.Database.<init>(Database.java:45)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.getDatabase(InFlightMetadataCollectorImpl.java:221)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:189)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:171)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:1431)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1502)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:366)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1853)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1802)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:954)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:625)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1363)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1352)
	at com.example.MomoLogWeb.MomoLogWebApplication.main(MomoLogWebApplication.java:29)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: 一般エラー: "org.h2.mvstore.MVStoreException: The file is locked: /Users/yamashiromomoka/MomoLogWeb/data/myDB.mv.db [2.2.224/7]"
General error: "org.h2.mvstore.MVStoreException: The file is locked: /Users/yamashiromomoka/MomoLogWeb/data/myDB.mv.db [2.2.224/7]" [50000-224]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:566)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:489)
	... 60 more
Caused by: org.h2.mvstore.MVStoreException: The file is locked: /Users/yamashiromomoka/MomoLogWeb/data/myDB.mv.db [2.2.224/7]
	at org.h2.mvstore.DataUtils.newMVStoreException(DataUtils.java:996)
	at org.h2.mvstore.SingleFileStore.lockFileChannel(SingleFileStore.java:143)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:117)
	at org.h2.mvstore.SingleFileStore.open(SingleFileStore.java:81)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:286)
	... 54 more
